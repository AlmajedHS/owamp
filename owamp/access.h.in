/*
 * $Id$
 */
#ifndef	_owamp_contrib_h_
#define	_owamp_contrib_h_
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <limits.h>
#include <math.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <assert.h>
#include <netdb.h>
#include <errno.h>
#include <sys/wait.h>
#include <syslog.h>
#include <stdarg.h>

/* for inet_pton */
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

/* for ntohl */
#include <sys/param.h>

#include <I2util/table.h>
#include <owamp/owamp.h>

#ifndef	OWP_PREFIX
#define	OWP_PREFIX	/usr/local
#endif

#undef	AUTOCONF_SYSCONFDIR
#define	MSTRCAT(A,B)		#A ## #B
#define	MSTRCATEXPAND(A,B)	MSTRCAT(A,B)
#define	OWP_CONFDIR		MSTRCATEXPAND(OWP_PREFIX,AUTOCONF_SYSCONFDIR)

#define MAX_LINE 1024

#ifndef MAXPATHLEN
#define MAXPATHLEN 1024
#endif

#define OWP_DEFAULT_OPEN_CLASS "open"
#define OWP_AUTH_CLASS "authenticated"
#define OWP_BANNED_CLASS "banned"

#define OWP_KID_LEN 16
#define OWP_PASSWD_LEN 16
#define OWP_HEX_PASSWD_LEN (OWP_PASSWD_LEN * 2)
#define OWP_MAX_CLASS_LEN 32

/*
** This structure is used to keep track of usage resources.
*/

typedef u_int64_t owp_lim_t;

/* Masks to encode which parts of limits struct have been set. */
#define BW_SET     0x1
#define DISK_SET   0x2
#define EXPIRY_SET 0x4
#define DOF_SET    0x8
#define DOC_SET    0x10

#define OWP_BW_INDEX      0
#define OWP_SPACE_INDEX   1
#define OWP_EXPIRY_INDEX  2

typedef struct owamp_limits {
#if 1 /* Remove later */
	owp_lim_t bandwidth;   /* bits/sec   */
	owp_lim_t space;       /* bytes      */
	owp_lim_t expiry;      /* sec        */
	int delete_on_fetch;   /* flag       */
	int delete_on_close;   /* flag       */
#endif
	owp_lim_t values[5];   
} owp_lim;

typedef struct {
	I2table ip2class;
	I2table class2limits;
	I2table passwd;
} policy_data;

typedef struct owp_access_id {
	u_int32_t addr4;
	u_int8_t  addr6[16];
	u_int8_t  offset;                       /* not meaningful for KID */
	char      kid[OWP_KID_LEN + 1];
	int    type;  /* OWP_IDTYPE_KID, OWP_IDTYPE_IPv4, OWP_IDTYPE_IPv6 */
} owp_access_id;

typedef struct owp_access_netmask {
	u_int32_t addr4;            /* In host byte order. */
	u_int8_t  addr6[16];        /* In network byte order. */
	u_int8_t  offset; 
	int       af;               /* AF_INET, AF_INET6 */
} owp_access_netmask;

typedef struct owp_kid_data {
	char passwd[OWP_HEX_PASSWD_LEN + 1];
	char class[OWP_MAX_CLASS_LEN + 1];
} owp_kid_data;

extern char *ipaddr2class(u_int32_t ip, I2table ip2class_hash);
extern void owp_print_ip2class_binding(const struct I2binding *p, FILE* fp);
void owp_print_kid2data_binding(const struct I2binding *p, FILE* fp);
extern void print_class2limits_binding(const struct I2binding *p, FILE* fp);
extern void owp_print_class2node_binding(const struct I2binding *p, FILE* fp);
extern char *owamp_denumberize(unsigned long addr);

extern unsigned long OWAMPGetBandwidth(owp_lim* lim);
extern unsigned long OWAMPGetSpace(owp_lim* lim);
extern unsigned long OWAMPGetNumSessions(owp_lim* lim);
extern I2datum* owp_raw2datum(const void *bytes, size_t len);

extern policy_data
*PolicyInit(
	OWPContext	ctx,
	char		*ip2class_file,
	char		*class2limits_file,
	char		*passwd_file,
	OWPErrSeverity	*err_ret
);

typedef struct owp_tree_node *owp_tree_node_ptr;

typedef struct owp_tree_node {
	char* data;
	owp_tree_node_ptr next_sibling;
	owp_tree_node_ptr first_child;
	owp_tree_node_ptr parent;
	owp_lim           limits;
} owp_tree_node;

#endif	/* _owamp_contrib_h_ */
